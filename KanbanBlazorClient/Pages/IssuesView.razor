@page "/issues-view"
@using KanbanBlazorClient.Services;
@using KanbanBlazorClient.Store;
@using Microsoft.AspNetCore.Authorization;
@inject IKanbanDemoService kanbanService;
@inject FilterStore filterStore;

@attribute [Authorize]

<FilterComponent />

<div class="row">
    <div class="col-md-4 list-group">
        <h3 class="tile-header">Todo</h3>
        @foreach (var issue in IssuesTodo ?? Enumerable.Empty<IssueViewDto>())
        {
            <Tile Issue="@issue" />
        }
    </div>
    <div class="col-md-4 list-group">
        <h3 class="tile-header">Doing</h3>
        @foreach (var issue in IssuesDoing ?? Enumerable.Empty<IssueViewDto>())
        {
            <Tile Issue="@issue" />
        }
    </div>
    <div class="col-md-4 list-group">
        <h3 class="tile-header">Done</h3>
        @foreach (var issue in IssuesDone ?? Enumerable.Empty<IssueViewDto>())
        {
            <Tile Issue="@issue" />
        }
    </div>
</div>

@code {
    public IEnumerable<IssueViewDto>? IssuesTodo { get; set; } = new List<IssueViewDto>();
    public IEnumerable<IssueViewDto>? IssuesDoing { get; set; } = new List<IssueViewDto>();
    public IEnumerable<IssueViewDto>? IssuesDone { get; set; } = new List<IssueViewDto>();

    private async Task OnKeyUpHandler()
    {
        await GetIssues();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetIssues();

        filterStore.OnChnage += async () =>
        {
            await GetIssues();
        };
    }

    private async Task GetIssues()
    {
        var issues = await kanbanService.GetIssues(filterStore.Query);

        if (issues != null)
        {
            IssuesTodo = issues.Where(issue => issue.State == IssueState.Todo).ToList();
            IssuesDoing = issues.Where(issue => issue.State == IssueState.Doing).ToList();
            IssuesDone = issues.Where(issue => issue.State == IssueState.Done).ToList();
        }
        this.StateHasChanged();
    }
}
